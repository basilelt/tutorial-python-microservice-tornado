python-code-coverage:
  stage: coverage
  image: ${CI_REGISTRY_IMAGE}:${TAG}
  variables:
    TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'
      variables:  
        TAG: $CI_COMMIT_TAG
  script:
    - cd src
    - coverage run --source=addrservice --branch -m unittest discover tests -p '*_test.py'
    - coverage html
    - coverage report
  artifacts:
    paths:
      - src/htmlcov

build-coverage-image:
  stage: coverage
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  variables:
    TAG: coverage-$CI_COMMIT_REF_SLUG
  needs:
    - python-code-coverage
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'
      variables:  
        TAG: $CI_COMMIT_TAG
  before_script:
    - echo "${SSL_CERTIFICATE}" >> /kaniko/ssl/certs/ca-certificates.crt
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/docker/coverage/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${TAG}"

docker-security-scan-coverage:
  stage: coverage
  image: 
    name: aquasec/trivy:0.60.0
    entrypoint: [""]
  needs: 
    - build-coverage-image
  variables:
    TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'
      variables:  
        TAG: $CI_COMMIT_TAG
  before_script:
    - echo "${SSL_CERTIFICATE}" >> /etc/ssl/certs/ca-certificates.crt
  script:
    - trivy registry login ${CI_REGISTRY} --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD}
    - trivy image "${CI_REGISTRY_IMAGE}:coverage-${TAG}" --no-progress --severity CRITICAL --exit-code 1
    - trivy image "${CI_REGISTRY_IMAGE}:coverage-${TAG}" --no-progress --severity HIGH --exit-code 0

serve-coverage-report-production:
  stage: coverage
  image: ${CI_REGISTRY_IMAGE}:ansible-${TAG}
  needs:
    - docker-security-scan-coverage
  variables:
    GIT_STRATEGY: none
    TAG: $CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG' 
  script:
    - cd /app
    - ansible-playbook site.yml --tags coverage-production
  environment:
    name: production/coverage
    url: http://coverage.$KUBE_DOMAIN

serve-coverage-report:
  stage: coverage
  image: ${CI_REGISTRY_IMAGE}:ansible-${TAG}
  needs:
    - docker-security-scan-coverage
  variables:
    GIT_STRATEGY: none
    TAG: $CI_COMMIT_REF_SLUG
    URL: http://coverage.$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        ENVIRONMENT: integration
    - if: '$CI_COMMIT_BRANCH == "master"'
      variables:
        ENVIRONMENT: preproduction
    - if: '$CI_COMMIT_TAG'
      variables:  
        TAG: $CI_COMMIT_TAG
        ENVIRONMENT: production
        URL: http://coverage.$KUBE_DOMAIN
  script:
    - ls -la /
    - ls -la /app || echo "App directory doesn't exist"
    - cd /app
    - ansible-playbook site.yml --tags coverage
  environment:
    name: $ENVIRONMENT/coverage
    url: $URL

serve-coverage-report-review:
  stage: coverage
  image: ${CI_REGISTRY_IMAGE}:ansible-${TAG}
  needs:
    - docker-security-scan-coverage
  variables:
    GIT_STRATEGY: none
    TAG: $CI_COMMIT_REF_SLUG
    URL: http://$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feat-/'
  script:
    - cd /app
    - ansible-playbook site.yml --tags coverage
  environment:
    name: review/$TAG
    url: http://coverage.$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
    on_stop: stop-review-coverage

stop-review-coverage:
  stage: coverage
  image: ${CI_REGISTRY_IMAGE}:ansible-${TAG}
  variables:
    GIT_STRATEGY: none
    TAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feat-/'
  script:
    - cd /app
    - ansible-playbook site.yml --tags coverage-reset
  environment:
    name: review/$TAG
    action: stop
  when: manual
